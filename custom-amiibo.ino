#include <SPI.h>
#include <MFRC522.h>

// RST and SS Pins
#define RST_PIN 9
#define SS_PIN 10

// Create an MFRC522 instance
MFRC522 mfrc522(SS_PIN, RST_PIN);

void setup() {

    Serial.begin(9600);                 // Initialize serial communications with the PC
    SPI.begin();                        // Init SPI bus

    mfrc522.PCD_Init();                 // Init MFRC522 card
    mfrc522.PCD_DumpVersionToSerial();  // Show details of PCD - MFRC522 Card Reader details
    Serial.println(F("Arduino Amiibo writer. Put your NFC-tag to the reader"));

}

void loop() {

    // Look for new cards
    if (!mfrc522.PICC_IsNewCardPresent()) return;

    // Select one of the cards
    if (!mfrc522.PICC_ReadCardSerial()) return;

    // Permitted write blocks on MIFARE 1K
    int blocks[] = {1,2,4,5,6,8,9,10,12,13,14,16,17,18,20,21,22,24,25,26,28,29,30,32,33,34,36,37,38,40,41,42,44,45};

    // Custom data
    byte dataBlock[] = { 0x00,0x00,0x00,0x88,0x34,0xe2,0x43,0x03,0x96,0x48,0x00,0x00,0xf1,0x10,0xff,0xee,0xa5,0x00,0x00,0x00,0xfa,0xb6,0x4f,0x97,0x71,0x49,0x27,0x98,0x96,0xb9,0x3f,0x9c,0x12,0x98,0x07,0x82,0xa0,0xc3,0x3f,0x77,0xb8,0xa3,0x65,0xce,0x02,0x06,0x39,0x53,0xe4,0x01,0x71,0xba,0x07,0x10,0xfb,0x80,0x47,0x79,0xf8,0xc1,0xb6,0x68,0xb8,0x55,0xca,0x64,0x02,0xa6,0x5a,0x19,0x4f,0x59,0x55,0xa6,0xf4,0x36,0x41,0xcc,0x4b,0x99,0x33,0x3f,0x01,0xca,0x01,0x00,0x00,0x00,0x04,0x18,0x09,0x02,0x0d,0x12,0xb2,0x12,0xab,0x75,0x66,0xdf,0x94,0x70,0xc5,0xad,0x37,0x9e,0x98,0xbd,0x78,0xc4,0x8a,0x88,0x5f,0x3e,0x16,0xc7,0xee,0xd1,0x87,0xb4,0x97,0x3a,0x0d,0x94,0xfe,0xae,0x83,0x29,0x5a,0x91,0x99,0xe8,0xe8,0xe1,0x72,0x4b,0x80,0x1f,0x91,0xbf,0x91,0x70,0x1d,0xeb,0x54,0xb2,0x8a,0x2e,0x26,0x4a,0x30,0xf1,0x28,0x8a,0x96,0x38,0x78,0x54,0x83,0xee,0x35,0x47,0x6d,0x66,0x99,0x08,0x1b,0x49,0x12,0xf9,0x90,0x57,0xc8,0xe2,0xb8,0xed,0x31,0xbf,0x3b,0xa3,0x80,0x26,0xa5,0x5d,0x31,0xa8,0x24,0x60,0x32,0x00,0x62,0x0d,0x4b,0xc3,0x59,0x23,0x64,0x31,0x5c,0xa6,0x57,0x75,0x67,0xf8,0x27,0xf1,0x32,0x88,0xaf,0xef,0x99,0xd5,0xa3,0xc3,0x6d,0xfd,0x32,0x54,0xf9,0x1c,0x36,0xf4,0xfb,0x27,0xb4,0x06,0xf0,0xbd,0xe8,0x08,0xbf,0xd1,0xd9,0x2b,0x70,0x4b,0xf3,0x23,0x8e,0xd0,0x9e,0x59,0x77,0x99,0x7f,0x16,0x8f,0xde,0xd7,0xd0,0x3d,0xc8,0xd6,0x22,0x98,0x2c,0x97,0x73,0x68,0xe4,0x62,0x9a,0xd3,0xf0,0x1f,0x7c,0x7e,0x16,0xfa,0x9e,0xae,0xee,0x3f,0x06,0xa5,0xf1,0x6b,0x3c,0xc5,0xbb,0x75,0xe3,0x6e,0xe8,0xeb,0xeb,0x84,0xfa,0x5b,0x9a,0x94,0x3a,0xa9,0xbe,0xb6,0xe4,0xa4,0x0d,0x9c,0xc8,0x8b,0xb0,0xdd,0x51,0x6d,0xa0,0x68,0x28,0xcf,0xbf,0x51,0x70,0xdb,0x24,0x0b,0x93,0x76,0x30,0xa2,0x50,0xad,0x33,0xd5,0xf6,0xbc,0xe1,0xba,0xd7,0x11,0xd4,0xbc,0xf7,0x6e,0x6a,0x3b,0x83,0x1b,0x9d,0xc9,0x83,0x25,0x65,0x05,0x12,0x46,0xfc,0x69,0x22,0xc4,0x3d,0x07,0xf7,0xfb,0x5a,0x51,0x9b,0x79,0x28,0xdf,0xaf,0x04,0x68,0xe3,0x92,0xbc,0x45,0x11,0x22,0xd5,0xc3,0xa2,0x98,0xb9,0xa4,0x4f,0xb8,0x79,0x85,0x45,0x02,0xa4,0x21,0xa6,0xa6,0xa1,0x83,0xe3,0xb6,0xff,0x5a,0x36,0x61,0x7f,0x61,0xb1,0x08,0x6d,0x18,0xfa,0x3f,0x2c,0xe5,0x68,0x9a,0x9f,0x2a,0xf0,0x31,0x44,0x72,0x09,0x72,0xa3,0x48,0x8f,0x1d,0x11,0xb7,0xec,0x38,0x73,0x5b,0x35,0xd0,0x67,0xd5,0xf4,0xb0,0x24,0xb3,0x65,0xd3,0xe6,0x07,0x5b,0x7a,0x2f,0xc2,0x9b,0x7b,0xa6,0x36,0xf3,0x89,0x83,0xa4,0x23,0xcd,0x5d,0x29,0x20,0x5c,0x3c,0xb3,0xec,0x8a,0x58,0xa2,0x9e,0xdf,0x8d,0xd0,0xd9,0x07,0xad,0x23,0xcd,0xa1,0x36,0x31,0xb1,0x4e,0x2e,0x4d,0x55,0xb7,0xb3,0xf2,0x27,0x8f,0xd8,0xf2,0x16,0xcd,0xfd,0xfc,0xef,0xe7,0xe0,0x54,0x66,0xbf,0xe8,0x63,0x2f,0x49,0xc9,0x34,0xbd,0xb3,0xbd,0xf1,0xf2,0x59,0xc0,0x71,0x99,0xa9,0x22,0xb9,0x32,0x3b,0xca,0xa1,0x47,0x4e,0xf5,0x2b,0x14,0x0b,0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x04,0x5f,0x00,0x00,0x00,0x9e,0xb7,0xdd,0xb4,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00 };

    // Initializing MIFARE PICC default key (FF FF FF FF FF FF)
    MFRC522::MIFARE_Key key;
    for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

    // Current tag status
    MFRC522::StatusCode status;

    // Displaying PICC properties to serial
    Serial.print(F("Card UID:"));
    for (byte i = 0; i < mfrc522.uid.size; i++) {

        Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
        Serial.print(mfrc522.uid.uidByte[i], HEX);

    }

    Serial.print(F("\nPICC type: "));
    MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
    Serial.println(mfrc522.PICC_GetTypeName(piccType));

    // Writing main data
    for (int i = 0; i < 34; i++) {

        // Debugging into serial
        Serial.print(F("Writing data into block ")); Serial.print(blocks[i]); Serial.println(F(" ..."));
        dump_byte_array(dataBlock + (i * 16), 16); Serial.println();

        // Authenticating
        status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blocks[i], &key, &(mfrc522.uid));
        if (status != MFRC522::STATUS_OK) {

            Serial.print(F("PCD_Authenticate() failed: "));
            Serial.println(mfrc522.GetStatusCodeName(status));
            return;

        }
        else Serial.println(F("PCD_Authenticate() success: "));

        // Writing data to block
        status = (MFRC522::StatusCode) mfrc522.MIFARE_Write(blocks[i], dataBlock + (i * 16), 16);

        if (status != MFRC522::STATUS_OK) {

            Serial.print(F("MIFARE_Write() failed: "));
            Serial.println(mfrc522.GetStatusCodeName(status));
            return;

        }
        else Serial.println(F("MIFARE_Write() success: "));

    }

    mfrc522.PICC_HaltA();       // Halt PICC
    mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD

}

// Helper routine to dump a byte array as hex values to Serial
void dump_byte_array(byte *buffer, byte bufferSize) {

    for (byte i = 0; i < bufferSize; i++) {

        Serial.print(buffer[i] < 0x10 ? " 0" : " ");
        Serial.print(buffer[i], HEX);

    }

}